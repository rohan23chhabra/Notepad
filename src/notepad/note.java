/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package notepad;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import static javax.swing.text.StyleConstants.FontFamily;
import javax.swing.text.StyledDocument;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.UndoManager;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.UIManager;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author bloody_c
 */

public class note extends javax.swing.JFrame {

    /**
     * Creates new form note
     */
    UndoManager undo=new UndoManager();
    int fontsize;
    Font font;
    Color highcolor;
    Style style1;
    String fontfamily;
    boolean isB,isI,isU,isSb,isSp,isSt,isH,change,isC;
    public note() {
        
        initComponents();
        isB=isI=isU=isSb=isSp=isSt=isH=change=isC=false;
        highcolor=Color.WHITE;
        //fontsize=slider.getValue();
        //font=fontcb.getFont();
        //applyInitialStyle();
        texpan.getDocument().addUndoableEditListener(
                new UndoableEditListener() {
                    public void undoableEditHappened(UndoableEditEvent e) {
                        undo.addEdit(e.getEdit());
                }
});
    }
    //int bold;
    //int underline;
    //int italic;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        texpan = new javax.swing.JTextPane();
        butbold = new javax.swing.JToggleButton();
        butital = new javax.swing.JToggleButton();
        butunder = new javax.swing.JToggleButton();
        butsub = new javax.swing.JToggleButton();
        butsup = new javax.swing.JToggleButton();
        buthigh = new javax.swing.JToggleButton();
        cut = new javax.swing.JButton();
        copy = new javax.swing.JButton();
        paste = new javax.swing.JButton();
        butundo = new javax.swing.JButton();
        butredo = new javax.swing.JButton();
        strike = new javax.swing.JToggleButton();
        image = new javax.swing.JButton();
        boxfamily = new javax.swing.JComboBox<>();
        boxsize = new javax.swing.JComboBox<>();
        colorbut = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenuItem();
        openMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        saveAsMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 153));

        texpan.setFont(new java.awt.Font("HelveticaNeue", 0, 20)); // NOI18N
        texpan.setMargin(new java.awt.Insets(5, 20, 5, 20));
        texpan.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                texpanCaretUpdate(evt);
            }
        });
        texpan.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                texpanFocusGained(evt);
            }
        });
        texpan.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                texpanCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        texpan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                texpanKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                texpanKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                texpanKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(texpan);

        butbold.setText("B");
        butbold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butboldActionPerformed(evt);
            }
        });

        butital.setText("I");
        butital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butitalActionPerformed(evt);
            }
        });

        butunder.setText("U");
        butunder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butunderActionPerformed(evt);
            }
        });

        butsub.setText("sub");
        butsub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butsubActionPerformed(evt);
            }
        });

        butsup.setText("SUP");
        butsup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butsupActionPerformed(evt);
            }
        });

        buthigh.setText("highlight");
        buthigh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buthighActionPerformed(evt);
            }
        });

        cut.setText("Cut");
        cut.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cutStateChanged(evt);
            }
        });
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });

        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });

        paste.setText("Paste");
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });

        butundo.setText("Undo");
        butundo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butundoActionPerformed(evt);
            }
        });

        butredo.setText("Redo");
        butredo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butredoActionPerformed(evt);
            }
        });

        strike.setText("Strike Through");
        strike.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strikeActionPerformed(evt);
            }
        });

        image.setText("Insert Image");
        image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageActionPerformed(evt);
            }
        });

        boxfamily.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Helvetica Neue", "Choco Cooky", "Times New Roman", "Impact", "Arial" }));
        boxfamily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxfamilyActionPerformed(evt);
            }
        });

        boxsize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "12", "14", "16", "18", "20", "22", "24", "26", "28", "30" }));
        boxsize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxsizeActionPerformed(evt);
            }
        });

        colorbut.setText("color");
        colorbut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorbutActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenu.setText("New");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        jMenu1.add(newMenu);

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        jMenu1.add(openMenu);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenu);

        saveAsMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenu.setText("Save As");
        saveAsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuActionPerformed(evt);
            }
        });
        jMenu1.add(saveAsMenu);

        exitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Cut");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem14.setText("Copy");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem14);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem15.setText("Paste");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem15);

        jMenuItem16.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem16.setText("Undo");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem16);

        jMenuItem17.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem17.setText("Redo");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem17);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Format");

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setText("Bold");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setText("Italic");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem12.setText("Underline");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem12);

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem13.setText("Strike Through");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem13);

        jMenuBar1.add(jMenu4);

        jMenu3.setText("Alignment");

        jMenuItem7.setText("Center Text");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem8.setText("Left Align");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem9.setText("Right Align");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(copy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paste)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butundo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butredo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(strike)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(image))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(butbold)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butunder)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butital)
                                .addGap(8, 8, 8)
                                .addComponent(colorbut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(butsub)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(butsup)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buthigh)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(boxfamily, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(boxsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 397, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butbold)
                    .addComponent(butunder)
                    .addComponent(butital)
                    .addComponent(butsub)
                    .addComponent(butsup)
                    .addComponent(buthigh)
                    .addComponent(boxfamily, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorbut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(copy)
                        .addComponent(paste)
                        .addComponent(butundo)
                        .addComponent(butredo)
                        .addComponent(strike)
                        .addComponent(image))
                    .addComponent(cut, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuActionPerformed
        // TODO add your handling code here:
        Object options[]={"Yes","No"};
        JPanel panel=new JPanel();
        panel.add(new JLabel("Do you want to save existing file?"));
        int result=JOptionPane.showOptionDialog(null, panel, "New File",JOptionPane.YES_NO_OPTION,JOptionPane.PLAIN_MESSAGE, null, options, null);
        if(result==JOptionPane.YES_OPTION)
        {
            try {
                Save();
            } catch (IOException ex) {
                Logger.getLogger(note.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadLocationException ex) {
                Logger.getLogger(note.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        texpan.setText("");
    }//GEN-LAST:event_newMenuActionPerformed
    
    private void Save() throws FileNotFoundException, IOException, BadLocationException 
    {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if(change)
        {
            saveProcess();
            JOptionPane.showMessageDialog(null,"Your changes were saved successfully!");
            change=false;
        }
        else
        {
            JOptionPane.showMessageDialog(null,"No changes were made!");
        }
    }
    private void saveProcess() throws FileNotFoundException, IOException, BadLocationException
    {
        JFileChooser chooser=new JFileChooser();
        int chooserValue=chooser.showSaveDialog(this);
        if(chooserValue==JFileChooser.APPROVE_OPTION)
        {
            StyledDocument doc=texpan.getStyledDocument();
            HTMLEditorKit kit=new HTMLEditorKit();
            
            BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(chooser.getSelectedFile()));
            try{
                kit.write(out, doc, 0, doc.getLength());
            }
            catch (FileNotFoundException e){
                JOptionPane.showMessageDialog(null, "File not Found.... Some Serious Error...");
            }
            catch (IOException e){
                    JOptionPane.showMessageDialog(null, "Input Error.....");
            }
        }
    }
    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        try {
            // TODO add your handling code here:
            Save();
        } catch (IOException ex) {
            Logger.getLogger(note.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(note.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*JFileChooser chooser= new JFileChooser();
        int chooserValue=chooser.showSaveDialog(this);
        if(chooserValue==JFileChooser.APPROVE_OPTION){
            try {
                PrintWriter fout=new PrintWriter(chooser.getSelectedFile());
                fout.print(texpan.getText());
                fout.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(note.class.getName()).log(Level.SEVERE, null, ex);
            }
        }*/
    }//GEN-LAST:event_saveMenuActionPerformed

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        // TODO add your handling code here:
         JFileChooser chooser= new JFileChooser();
        int chooserValue=chooser.showOpenDialog(this);
        if(chooserValue==JFileChooser.APPROVE_OPTION){
             try {
                 Scanner fin = new Scanner(chooser.getSelectedFile());
                 String buffer="";
                 while(fin.hasNext())
                 {
                     buffer+=fin.nextLine()+"\n";
                 }
                 texpan.setText(buffer);   
             } catch (FileNotFoundException ex) {
                 JOptionPane.showMessageDialog(this,"File not found");
             }
            
        }
    }//GEN-LAST:event_openMenuActionPerformed

    Color color=Color.BLACK;
    private void butboldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butboldActionPerformed
        // TODO add your handling code here:
        //static int m=0;
        
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument(); 
        int l = texpan.getSelectionStart();
        int r = texpan.getSelectionEnd();
        int flag=0;
        for(int i=l;i<r;i++)
        {
            flag=1;
            Element e=doc.getCharacterElement(i);
            AttributeSet as=(AttributeSet)e.getAttributes();
            int fsize=StyleConstants.getFontSize(as);
            boolean isBold=StyleConstants.isBold(as);
            boolean isItal=StyleConstants.isItalic(as);
            boolean isUnder=StyleConstants.isUnderline(as);
            Color fgcolor=StyleConstants.getForeground(as);
            //StyleConstants sc;
            //Color bgcolor=StyleConstants.getBackground(as);
            boolean b=butbold.isSelected();
            Style s=texpan.addStyle("Lol!",null);
            s.addAttribute(StyleConstants.FontSize,fsize);
            s.addAttribute(StyleConstants.Bold,b);
            s.addAttribute(StyleConstants.Italic,isItal);
            s.addAttribute(StyleConstants.Underline,isUnder);
            s.addAttribute(StyleConstants.Foreground,fgcolor);
            boolean isSub=StyleConstants.isSubscript(as);
            boolean isSup=StyleConstants.isSuperscript(as);
            boolean isStr=StyleConstants.isStrikeThrough(as);
            s.addAttribute(StyleConstants.Subscript, isSub);
            s.addAttribute(StyleConstants.Superscript, isSup);
            s.addAttribute(StyleConstants.StrikeThrough, isStr);
            Color bgcolor=StyleConstants.getBackground(as);
            if(bgcolor!=Color.BLACK)
            {
                s.addAttribute(StyleConstants.Background,bgcolor);
            }
            doc.setCharacterAttributes(i,1,s,true);
        }
        if(flag==0)
        {   
            if(butbold.isSelected()) 
            {
                isB=true;
                butbold.setSelected(true);
            } 
            else
            {
                isB=false;
                butbold.setSelected(false);
            }
            
        }
        else
        {
            butbold.setSelected(false);
        }
        change=true;
    }//GEN-LAST:event_butboldActionPerformed

    private void saveAsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuActionPerformed
        try {
            // TODO add your handling code here:
            Save();
        } catch (IOException ex) {
            Logger.getLogger(note.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(note.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveAsMenuActionPerformed

    private void texpanKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texpanKeyReleased
        // TODO add your handling code here:
        int code=evt.getKeyCode();
        if(code==KeyEvent.VK_BACK_SPACE)
            return;
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int carpo=texpan.getCaretPosition();
        Style style = texpan.addStyle("I'm a Style", null);
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
         if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        
        //String family=(String)fontcb.getSelectedItem();
        //int size=Integer.parseInt((String)sizecb.getSelectedItem());
        //StyleConstants.setFontSize(style, size);
        //StyleConstants.setFontFamily(style, family);
        StyleConstants.setForeground(style, color);
        doc.setCharacterAttributes(carpo-1, 1, style, true);
        change=true;
    }//GEN-LAST:event_texpanKeyReleased

    private void butunderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butunderActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument(); 
        int l = texpan.getSelectionStart();
        int r = texpan.getSelectionEnd();
        int flag=0;
        for(int i=l;i<r;i++)
        {
            flag=1;
            Element e=doc.getCharacterElement(i);
            AttributeSet as=(AttributeSet)e.getAttributes();
            int fsize=StyleConstants.getFontSize(as);
            boolean isBold=StyleConstants.isBold(as);
            boolean isItal=StyleConstants.isItalic(as);
            boolean isUnder=StyleConstants.isUnderline(as);
            Color fgcolor=StyleConstants.getForeground(as);
            //StyleConstants sc;
            //Color bgcolor=StyleConstants.getBackground(as);
            boolean b=butunder.isSelected();
            Style s=texpan.addStyle("Lol!",null);
            s.addAttribute(StyleConstants.FontSize,fsize);
            s.addAttribute(StyleConstants.Bold,isBold);
            s.addAttribute(StyleConstants.Italic,isItal);
            s.addAttribute(StyleConstants.Underline,b);
            s.addAttribute(StyleConstants.Foreground,fgcolor);
            boolean isSub=StyleConstants.isSubscript(as);
            boolean isSup=StyleConstants.isSuperscript(as);
            boolean isStr=StyleConstants.isStrikeThrough(as);
            s.addAttribute(StyleConstants.Subscript, isSub);
            s.addAttribute(StyleConstants.Superscript, isSup);
            s.addAttribute(StyleConstants.StrikeThrough, isStr);
            Color bgcolor=StyleConstants.getBackground(as);
            if(bgcolor!=Color.BLACK)
            {
                s.addAttribute(StyleConstants.Background,bgcolor);
            }
            //s.addAttribute(StyleConstants.Background,bgcolor);
            doc.setCharacterAttributes(i,1,s,true);
        }
        if(flag==0)
        {   
            if(butunder.isSelected()) {
                isU=true;
                butunder.setSelected(true);
            } 
            else
            {
                isU=false;
                butunder.setSelected(false);
            }
        }
        else
        {
            butunder.setSelected(false);
        }
        change=true;
    }//GEN-LAST:event_butunderActionPerformed

    private void butitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butitalActionPerformed
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument(); 
        int l = texpan.getSelectionStart();
        int r = texpan.getSelectionEnd();
        int flag=0;
        for(int i=l;i<r;i++)
        {
            flag=1;
            Element e=doc.getCharacterElement(i);
            AttributeSet as=(AttributeSet)e.getAttributes();
            int fsize=StyleConstants.getFontSize(as);
            boolean isBold=StyleConstants.isBold(as);
            boolean isItal=StyleConstants.isItalic(as);
            boolean isUnder=StyleConstants.isUnderline(as);
            Color fgcolor=StyleConstants.getForeground(as);
            //StyleConstants sc;
            //Color bgcolor=StyleConstants.getBackground(as);
            boolean b=butital.isSelected();
            Style s=texpan.addStyle("Lol!",null);
            s.addAttribute(StyleConstants.FontSize,fsize);
            s.addAttribute(StyleConstants.Bold,isBold);
            s.addAttribute(StyleConstants.Italic,b);
            s.addAttribute(StyleConstants.Underline,isUnder);
            s.addAttribute(StyleConstants.Foreground,fgcolor);
            boolean isSub=StyleConstants.isSubscript(as);
            boolean isSup=StyleConstants.isSuperscript(as);
            boolean isStr=StyleConstants.isStrikeThrough(as);
            s.addAttribute(StyleConstants.Subscript, isSub);
            s.addAttribute(StyleConstants.Superscript, isSup);
            s.addAttribute(StyleConstants.StrikeThrough, isStr);
            Color bgcolor=StyleConstants.getBackground(as);
            if(bgcolor!=Color.BLACK)
            {
                s.addAttribute(StyleConstants.Background,bgcolor);
            }
            //s.addAttribute(StyleConstants.Background,bgcolor);
            doc.setCharacterAttributes(i,1,s,true);
        }
        if(flag==0)
        {   
            if(butital.isSelected()) {
                isI=true;
                butital.setSelected(true);
            } else
            {
                isI=false;
                butital.setSelected(false);
            }
        }
        else
        {
            butital.setSelected(false);
        }
        change=true;
    }//GEN-LAST:event_butitalActionPerformed
    //int m=1;
    boolean backspace=false;
    boolean delete=false;
    private void texpanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texpanKeyPressed
        // TODO add your handling code here:
        change=true;
        int code=evt.getKeyCode();
        if(code==KeyEvent.VK_BACK_SPACE)
        {
            backspace=true;
            return;
        }
        if(code==KeyEvent.VK_DELETE);
        {
            delete=true;
            return;
        }
        
        //sizecb.setEditable(true);
       // m=1;
        //if(m!=1){
      /* texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int carpo=texpan.getCaretPosition();
        Style style = texpan.addStyle("I'm a Style", null);
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
        if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
        StyleConstants.setAlignment(style, 5);
        String family=(String)fontcb.getSelectedItem();
        int size=Integer.parseInt((String)sizecb.getSelectedItem());
        StyleConstants.setFontSize(style, size);
        StyleConstants.setFontFamily(style, family);
        StyleConstants.setForeground(style, color);
        doc.setCharacterAttributes(carpo-1,1, style, true);*/
       // }
        //m++;
    }//GEN-LAST:event_texpanKeyPressed

    private void butsubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butsubActionPerformed
        // TODO add your handling code here:
        //butsup.setSelected(false);
        //texpan.requestFocus();
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument(); 
        int l = texpan.getSelectionStart();
        int r = texpan.getSelectionEnd();
        int flag=0;
        for(int i=l;i<r;i++)
        {
            flag=1;
            Element e=doc.getCharacterElement(i);
            AttributeSet as=(AttributeSet)e.getAttributes();
            int fsize=StyleConstants.getFontSize(as);
            boolean isBold=StyleConstants.isBold(as);
            boolean isItal=StyleConstants.isItalic(as);
            boolean isUnder=StyleConstants.isUnderline(as);
            boolean isStrike=StyleConstants.isStrikeThrough(as);
            Color fgcolor=StyleConstants.getForeground(as);
            //StyleConstants sc;
            Color bgcolor=StyleConstants.getBackground(as);
            boolean b=butsub.isSelected();
            Style s=texpan.addStyle("Lol!",null);
            s.addAttribute(StyleConstants.FontSize,fsize);
            s.addAttribute(StyleConstants.Bold,isBold);
            s.addAttribute(StyleConstants.Italic,isItal);
            s.addAttribute(StyleConstants.Underline,isUnder);
            s.addAttribute(StyleConstants.Foreground,fgcolor);
            s.addAttribute(StyleConstants.Subscript,b);
            s.addAttribute(StyleConstants.StrikeThrough,isStrike);
            if(bgcolor!=Color.BLACK)
            {
                s.addAttribute(StyleConstants.Background,bgcolor);
            }
            doc.setCharacterAttributes(i,1,s,true);
        }
        if(flag==0)
        {   
            if(butsub.isSelected()) 
            {
                isSb=true;
                butsub.setSelected(true);
            } 
            else
            {
                isSb=false;
                butsub.setSelected(false);
            }
            
        }
        else
        {
            butsub.setSelected(false);
        }
        change=true;
    }//GEN-LAST:event_butsubActionPerformed

    private void butsupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butsupActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument(); 
        int l = texpan.getSelectionStart();
        int r = texpan.getSelectionEnd();
        int flag=0;
        for(int i=l;i<r;i++)
        {
            flag=1;
            Element e=doc.getCharacterElement(i);
            AttributeSet as=(AttributeSet)e.getAttributes();
            int fsize=StyleConstants.getFontSize(as);
            boolean isBold=StyleConstants.isBold(as);
            boolean isItal=StyleConstants.isItalic(as);
            boolean isUnder=StyleConstants.isUnderline(as);
            boolean isStrike=StyleConstants.isStrikeThrough(as);
            Color fgcolor=StyleConstants.getForeground(as);
            //StyleConstants sc;
            Color bgcolor=StyleConstants.getBackground(as);
            boolean b=butsup.isSelected();
            Style s=texpan.addStyle("Lol!",null);
            s.addAttribute(StyleConstants.FontSize,fsize);
            s.addAttribute(StyleConstants.Bold,isBold);
            s.addAttribute(StyleConstants.Italic,isItal);
            s.addAttribute(StyleConstants.Underline,isUnder);
            s.addAttribute(StyleConstants.Foreground,fgcolor);
            s.addAttribute(StyleConstants.Superscript,b);
            s.addAttribute(StyleConstants.StrikeThrough,isStrike);
            if(bgcolor!=Color.BLACK)
            {
                s.addAttribute(StyleConstants.Background,bgcolor);
            }
            doc.setCharacterAttributes(i,1,s,true);
        }
        if(flag==0)
        {   
            if(butsup.isSelected()) 
            {
                isSp=true;
                butsup.setSelected(true);
            } 
            else
            {
                isSp=false;
                butsup.setSelected(false);
            }
            
        }
        else
        {
            butsup.setSelected(false);
        }
        change=true;
    }//GEN-LAST:event_butsupActionPerformed

    private void texpanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texpanKeyTyped
        // TODO add your handling code here:
        /*if(backspace)
        {
            backspace=false;
            return;
        }
        if(delete)
        {
            delete=false;
            return;
        }*/
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int carpo=texpan.getCaretPosition();
        Style style = texpan.addStyle("I'm a Style", null);
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
        if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(buthigh.isSelected())
        {
            StyleConstants.setBackground(style,highcolor);
        }
        //String family=(String)fontcb.getSelectedItem();
        //int size=Integer.parseInt((String)sizecb.getSelectedItem());
        //StyleConstants.setFontSize(style, size);
        //StyleConstants.setFontFamily(style, family);
        if(colorbut.isSelected())
        {
            StyleConstants.setForeground(style, color);
        }
        doc.setCharacterAttributes(carpo-1, 1, style, true);
        change=true;

    }//GEN-LAST:event_texpanKeyTyped

    private void buthighActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buthighActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        if(!buthigh.isSelected())
        {
            buthigh.setSelected(false);
            return;
        }
        highcolor = JColorChooser.showDialog(this, "Colors",Color.YELLOW);
        StyledDocument doc = texpan.getStyledDocument();
        int l = texpan.getSelectionStart();
        int r = texpan.getSelectionEnd();
        int flag=0;
        for(int i=l;i<r;i++)
        {
            flag=1;
            Element e=doc.getCharacterElement(i);
            AttributeSet as=(AttributeSet)e.getAttributes();
            int fsize=StyleConstants.getFontSize(as);
            boolean isBold=StyleConstants.isBold(as);
            boolean isItal=StyleConstants.isItalic(as);
            boolean isUnder=StyleConstants.isUnderline(as);
            Color fgcolor=StyleConstants.getForeground(as);
            //StyleConstants sc;
            //Color bgcolor=StyleConstants.getBackground(as);
            Style s=texpan.addStyle("Lol!",null);
            s.addAttribute(StyleConstants.FontSize,fsize);
            s.addAttribute(StyleConstants.Bold,isBold);
            s.addAttribute(StyleConstants.Italic,isItal);
            s.addAttribute(StyleConstants.Underline,isUnder);
            s.addAttribute(StyleConstants.Foreground,fgcolor);
            boolean isSub=StyleConstants.isSubscript(as);
            boolean isSup=StyleConstants.isSuperscript(as);
            boolean isStr=StyleConstants.isStrikeThrough(as);
            s.addAttribute(StyleConstants.Subscript, isSub);
            s.addAttribute(StyleConstants.Superscript, isSup);
            s.addAttribute(StyleConstants.StrikeThrough, isStr);
            s.addAttribute(StyleConstants.Background,highcolor);
            doc.setCharacterAttributes(i,1,s,true);
        }
        if(flag==0)
        {   
            buthigh.setSelected(true);
        }
        else
        {
            buthigh.setSelected(false);
        }
        change=true;
    }//GEN-LAST:event_buthighActionPerformed

    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
        // TODO add your handling code here:
        texpan.cut();
        change=true;
    }//GEN-LAST:event_cutActionPerformed

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        // TODO add your handling code here:
        texpan.copy();
        change=true;
    }//GEN-LAST:event_copyActionPerformed

    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed
        // TODO add your handling code here:
        texpan.paste();
        change=true;
    }//GEN-LAST:event_pasteActionPerformed

    private void butundoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butundoActionPerformed
        // TODO add your handling code here:
        try {
            undo.undo();
        } catch (CannotRedoException cre) {
            cre.printStackTrace();
        }
        change=true;
    }//GEN-LAST:event_butundoActionPerformed

    private void butredoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butredoActionPerformed
        // TODO add your handling code here:
        try {
            undo.redo();
        } catch (CannotRedoException cre) {
            cre.printStackTrace();
        }
        change=true;
    }//GEN-LAST:event_butredoActionPerformed

    private void strikeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strikeActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument(); 
        int l = texpan.getSelectionStart();
        int r = texpan.getSelectionEnd();
        int flag=0;
        for(int i=l;i<r;i++)
        {
            flag=1;
            Element e=doc.getCharacterElement(i);
            AttributeSet as=(AttributeSet)e.getAttributes();
            int fsize=StyleConstants.getFontSize(as);
            boolean isBold=StyleConstants.isBold(as);
            boolean isItal=StyleConstants.isItalic(as);
            boolean isUnder=StyleConstants.isUnderline(as);
            boolean isSub=StyleConstants.isSubscript(as);
            boolean isSup=StyleConstants.isSuperscript(as);
            Color fgcolor=StyleConstants.getForeground(as);
            //StyleConstants sc;
            Color bgcolor=StyleConstants.getBackground(as);
            boolean b=strike.isSelected();
            Style s=texpan.addStyle("Lol!",null);
            s.addAttribute(StyleConstants.FontSize,fsize);
            s.addAttribute(StyleConstants.Bold,isBold);
            s.addAttribute(StyleConstants.Italic,isItal);
            s.addAttribute(StyleConstants.Underline,isUnder);
            s.addAttribute(StyleConstants.Foreground,fgcolor);
            s.addAttribute(StyleConstants.Superscript,isSup);
            s.addAttribute(StyleConstants.Subscript,isSub);
            s.addAttribute(StyleConstants.StrikeThrough,b);
            if(bgcolor!=Color.BLACK)
            {
                s.addAttribute(StyleConstants.Background,bgcolor);
            }
            doc.setCharacterAttributes(i,1,s,true);
        }
        if(flag==0)
        {   
            if(strike.isSelected()) 
            {
                isSt=true;
                strike.setSelected(true);
            } 
            else
            {
                isSt=false;
                strike.setSelected(false);
            }
            
        }
        else
        {
            strike.setSelected(false);
        }
        change=true;
    }//GEN-LAST:event_strikeActionPerformed

    private void imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageActionPerformed
        // TODO add your handling code here:
        JFileChooser jf=new JFileChooser();

        // Show open dialog
        int option=jf.showOpenDialog(this);

        // If user chooses to insert..
        if(option==JFileChooser.APPROVE_OPTION)
        {
            File file=jf.getSelectedFile();
            if(isImage(file))
            {
                // Insert the icon
                texpan.insertIcon(new ImageIcon(file.getAbsolutePath()));

                int c=texpan.getCaretPosition();
                System.out.println(c);
            }
            else
            // Show an error message, if not an image
            JOptionPane.showMessageDialog(this,"The file is not an image.","Not Image",JOptionPane.ERROR_MESSAGE);
        }
        change=true;
    }//GEN-LAST:event_imageActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
        change=true;
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_LEFT);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
        change=true;
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_RIGHT);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
        change=true;
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        /*texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(from!=to)
        {
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
            doc.setCharacterAttributes(from, to-from, style, true);
            //butbold.setSelected(false);
        }*/
        texpan.requestFocus();
        butbold.doClick();
        change=true;
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        /*texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(from!=to)
        {
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
            doc.setCharacterAttributes(from, to-from, style, true);
            //butbold.setSelected(false);
        }*/
        texpan.requestFocus();
        butital.doClick();
        change=true;
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
        /*texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(from!=to)
        {
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
            doc.setCharacterAttributes(from, to-from, style, true);
            //butbold.setSelected(false);
        }*/
        texpan.requestFocus();
        butunder.doClick();
        change=true;
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // TODO add your handling code here:
        /*texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(from!=to)
        {
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
            doc.setCharacterAttributes(from, to-from, style, true);
            //butbold.setSelected(false);
        }*/
        texpan.requestFocus();
        strike.doClick();
        change=true;
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        copy.doClick();
        change=true;
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        paste.doClick();
        change=true;
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        cut.doClick();
        change=true;
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        butundo.doClick();
        change=true;
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        butredo.doClick();
        change=true;
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void texpanFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texpanFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_texpanFocusGained

    private void texpanCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_texpanCaretUpdate
        // TODO add your handling code here:
        
        StyledDocument doc=texpan.getStyledDocument();
        int index=texpan.getCaretPosition()-1;
        if(index==-1)
            return;
        Element e=doc.getCharacterElement(index);
        AttributeSet as=e.getAttributes();
        fontsize=StyleConstants.getFontSize(as);
        //Setting buttons.
        boolean B=false,I=false,U=false;
        if(StyleConstants.isBold(as))
            butbold.setSelected(true);
        else
        {
            B=false;
            butbold.setSelected(false);
        }
        if(StyleConstants.isItalic(as))
            butital.setSelected(true);
        else
        {
            I=false;
            butital.setSelected(false);
        }
        if(StyleConstants.isUnderline(as))
            butunder.setSelected(true);
        else
        {
            U=false;
            butunder.setSelected(false);
        }
        if(StyleConstants.isSubscript(as))
            butsub.setSelected(true);
        else
            butsub.setSelected(false);
        if(StyleConstants.isSuperscript(as))
            butsup.setSelected(true);
        else
            butsup.setSelected(false);
        if(StyleConstants.isStrikeThrough(as))
            strike.setSelected(true);
        else
            strike.setSelected(false);
        Color prev_color=StyleConstants.getForeground(as);
        if(prev_color==Color.BLACK)
            colorbut.setSelected(false);
        else
            colorbut.setSelected(true);
            
        
        //now if someone presses bold italics underline sub sup strikethrough or colorbutton....
        if(isB)
            butbold.setSelected(true);
        if(isU)
            butunder.setSelected(true);
        if(isI)
            butital.setSelected(true);
        if(isSb)
            butsub.setSelected(true);
        if(isSp)
            butsup.setSelected(true);
        if(isSt)
            strike.setSelected(true);
        if(isC)
            colorbut.setSelected(true);
    }//GEN-LAST:event_texpanCaretUpdate

    private void texpanCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_texpanCaretPositionChanged

    }//GEN-LAST:event_texpanCaretPositionChanged
    
    private void cutStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cutStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cutStateChanged

    private void boxfamilyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxfamilyActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        fontfamily=(String) boxfamily.getSelectedItem();
        StyledDocument doc = texpan.getStyledDocument(); 
        int l = texpan.getSelectionStart();
        int r = texpan.getSelectionEnd();
        int flag=0;
        for(int i=l;i<r;i++)
        {
            flag=1;
            Element e=doc.getCharacterElement(i);
            AttributeSet as=(AttributeSet)e.getAttributes();
            //int fsize=StyleConstants.getFontSize(as);
            boolean isBold=StyleConstants.isBold(as);
            boolean isItal=StyleConstants.isItalic(as);
            boolean isUnder=StyleConstants.isUnderline(as);
            Color fgcolor=StyleConstants.getForeground(as);
            //StyleConstants sc;
            //Color bgcolor=StyleConstants.getBackground(as);
            //boolean b=butbold.isSelected();
            Style s=texpan.addStyle("Lol!",null);
            //s.addAttribute(StyleConstants.FontSize,fsize);
            s.addAttribute(StyleConstants.Bold,isBold);
            s.addAttribute(StyleConstants.Italic,isItal);
            s.addAttribute(StyleConstants.Underline,isUnder);
            s.addAttribute(StyleConstants.Foreground,fgcolor);
            boolean isSub=StyleConstants.isSubscript(as);
            boolean isSup=StyleConstants.isSuperscript(as);
            boolean isStr=StyleConstants.isStrikeThrough(as);
            s.addAttribute(StyleConstants.Subscript, isSub);
            s.addAttribute(StyleConstants.Superscript, isSup);
            s.addAttribute(StyleConstants.StrikeThrough, isStr);
            Color bgcolor=StyleConstants.getBackground(as);
            if(bgcolor!=Color.BLACK)
            {
                s.addAttribute(StyleConstants.Background,bgcolor);
            }
            int temp=StyleConstants.getFontSize(as);
            s.addAttribute(StyleConstants.FontFamily, fontfamily);
            s.addAttribute(StyleConstants.FontSize,temp);
            doc.setCharacterAttributes(i,1,s,true);
        }
        if(flag==0)
        {   
            
        }
        change=true;
    }//GEN-LAST:event_boxfamilyActionPerformed

    private void boxsizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxsizeActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        String temp=(String) boxsize.getSelectedItem();
        fontsize=Integer.parseInt(temp); 
        //Font f=new Font(fontfamily,Font.PLAIN,fontsize);
        StyledDocument doc = texpan.getStyledDocument(); 
        int l = texpan.getSelectionStart();
        int r = texpan.getSelectionEnd();
        int flag=0;
        for(int i=l;i<r;i++)
        {
            flag=1;
            Element e=doc.getCharacterElement(i);
            AttributeSet as=(AttributeSet)e.getAttributes();
            //int fsize=StyleConstants.getFontSize(as);
            boolean isBold=StyleConstants.isBold(as);
            boolean isItal=StyleConstants.isItalic(as);
            boolean isUnder=StyleConstants.isUnderline(as);
            Color fgcolor=StyleConstants.getForeground(as);
            //StyleConstants sc;
            //Color bgcolor=StyleConstants.getBackground(as);
            //boolean b=butbold.isSelected();
            Style s=texpan.addStyle("Lol!",null);
            //s.addAttribute(StyleConstants.FontSize,fsize);
            s.addAttribute(StyleConstants.Bold,isBold);
            s.addAttribute(StyleConstants.Italic,isItal);
            s.addAttribute(StyleConstants.Underline,isUnder);
            s.addAttribute(StyleConstants.Foreground,fgcolor);
            boolean isSub=StyleConstants.isSubscript(as);
            boolean isSup=StyleConstants.isSuperscript(as);
            boolean isStr=StyleConstants.isStrikeThrough(as);
            s.addAttribute(StyleConstants.Subscript, isSub);
            s.addAttribute(StyleConstants.Superscript, isSup);
            s.addAttribute(StyleConstants.StrikeThrough, isStr);
            Color bgcolor=StyleConstants.getBackground(as);
            if(bgcolor!=Color.BLACK)
            {
                s.addAttribute(StyleConstants.Background,bgcolor);
            }
            s.addAttribute(StyleConstants.FontSize,fontsize);
            String ff=StyleConstants.getFontFamily(as);
            s.addAttribute(StyleConstants.FontFamily,ff);
            doc.setCharacterAttributes(i,1,s,true);
        }
        /*if(flag==0)
        {   
            if(butbold.isSelected()) 
            {
                isB=true;
                butbold.setSelected(true);
            } 
            else
            {
                isB=false;
                butbold.setSelected(false);
            }
            
        }
        else
        {
            butbold.setSelected(false);
        }*/
        change=true;
    }//GEN-LAST:event_boxsizeActionPerformed

    private void colorbutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorbutActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        /*if(!butcolor.isSelected())
        {
            butcolor.setSelected(false);
            return;
        }*/
        color = JColorChooser.showDialog(this, "Colors",Color.BLUE);
        int str=color.getAlpha();
        System.out.println(str);
        //color_state.setText(color.getAlpha()+"");
        //texpan.setBackground(color);
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        int flag=0;
        for(int i=from;i<to;i++)
        {
            flag=1;
            Element e=doc.getCharacterElement(i);
            AttributeSet as=e.getAttributes();
            boolean isBold=StyleConstants.isBold(as);
            boolean isUnder=StyleConstants.isUnderline(as);
            boolean isItal=StyleConstants.isItalic(as);
            //int fs=StyleConstants.getFontSize(as);
            Style s=texpan.addStyle("lulz",null);
            s.addAttribute(StyleConstants.Bold, isBold);
            s.addAttribute(StyleConstants.Italic,isItal);
            s.addAttribute(StyleConstants.Underline,isUnder);
            //s.addAttribute(StyleConstants.FontSize,fs);
            s.addAttribute(StyleConstants.Foreground,color);
            boolean isSub=StyleConstants.isSubscript(as);
            boolean isSup=StyleConstants.isSuperscript(as);
            boolean isStr=StyleConstants.isStrikeThrough(as);
            s.addAttribute(StyleConstants.Subscript, isSub);
            s.addAttribute(StyleConstants.Superscript, isSup);
            s.addAttribute(StyleConstants.StrikeThrough, isStr);
            Color bgcolor=StyleConstants.getBackground(as);
            if(bgcolor!=Color.BLACK)
            {
                s.addAttribute(StyleConstants.Background,bgcolor);
            }
            doc.setCharacterAttributes(i,1,s,true);
        }
        //int flag=0;
        /*if(to!=from)
        {
            //flag=1;
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setForeground(style, color);
            //doc.setCharacterAttributes(from, to-from, style, true);
        
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
         if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
        
        //String family=(String)fontcb.getSelectedItem();
        //int size=Integer.parseInt((String)sizecb.getSelectedItem());
        //StyleConstants.setFontSize(style, size);
        //StyleConstants.setFontFamily(style, family);
        doc.setCharacterAttributes(from, to-from, style, true);
        color=Color.BLACK;
        StyleConstants.setForeground(style, color);
        }
        else
        {
            butcolor.setSelected(true);
        }*/
        if(flag==0)
        {
            System.out.println("color");
            if(colorbut.isSelected())
            {
                isC=true;
                colorbut.setSelected(true);
            }
            else
            {
                isC=false;
                colorbut.setSelected(false);
            }
            //colorbut.setSelected(true);
        }
        else
        {
            colorbut.setSelected(false);
            color=Color.BLACK;
        }
        change=true;
    }//GEN-LAST:event_colorbutActionPerformed
       
    /**
     * @param args the command line arguments
     */
    private boolean isImage(File file)
    {
        String name=file.getName();
        return name.endsWith(".jpg") || name.endsWith(".png") || name.endsWith(".jpeg") || name.endsWith(".gif");
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new note().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxfamily;
    private javax.swing.JComboBox<String> boxsize;
    private javax.swing.JToggleButton butbold;
    private javax.swing.JToggleButton buthigh;
    private javax.swing.JToggleButton butital;
    private javax.swing.JButton butredo;
    private javax.swing.JToggleButton butsub;
    private javax.swing.JToggleButton butsup;
    private javax.swing.JToggleButton butunder;
    private javax.swing.JButton butundo;
    private javax.swing.JButton colorbut;
    private javax.swing.JButton copy;
    private javax.swing.JButton cut;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JButton image;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JButton paste;
    private javax.swing.JMenuItem saveAsMenu;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JToggleButton strike;
    private javax.swing.JTextPane texpan;
    // End of variables declaration//GEN-END:variables

    
}
